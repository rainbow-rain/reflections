What happens when you initialize a repository? Why do you need to do it?

通过git init初始化版本库，系统显示Initialized empty Git repository in XXX；
使用ls -a查看文件夹中文件，包括隐藏文件；
而后使用git status 查看最后提交后更改的文件。


How is the staging area different from the working directory and the repository?
What value do you think it offers?

暂存区能够仅跟踪目录中的某些文件，并对其绑定到单一提交，作为一个commit，添加到仓库。


How can you use the staging area to make sure you have one commit per logical
change?

每进行一次逻辑更改，则将更改的文件git add进暂存区，再通过git commit绑定为单一commit，添加信息并添加到repository中。


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

创建不同类型的版本，例如不同的语言版本。

协同工作，创建新分支；
当需要处理新的任务时，创建新分支；
制作不同的内容时，创建新分支；
每次当切换为创建新的功能或者纠正bug时，创建一个新的分支；
将其视为上下文切换context switching。

git 分支使项目保持条理性，尤其当公开分享项目时。
master分支是产品质量分支，绝对不会崩溃，始终能够运转；
开发分支，包括正在进行的项目内容；
实验性分支experimental branch 或者一些独特功能分支feature branches，这些是你正在研究的内容，完全料到会崩溃，你想要与他人分享这些内容，但是明白它们不是正式版内容。
分支不仅有助于公开合作，还有助于与自己合作。


How do the diagrams help you visualize the branch structure?

在创建了分支的地方，画出分支，并展示分支上的提交，直观查看分支。


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
